#!/bin/bash
################################################################################
# Ananicy - is Another auto nice daemon, with community rules support
# Configs are placed under /etc/ananicy.d/

## Define some fuctions
YN(){
    case "$1" in
        Yes|Y|1|true) return 0 ;;
        *) return 1 ;;
    esac
}

export INFO_ENABLED=true
export WARN_ENABLED=true
export ERRO_ENABLED=true

TMP="$(mktemp -u)"

INFO(){ YN $INFO_ENABLED || return; echo "INFO: $*";}
WARN(){ YN $WARN_ENABLED || return; echo "WARN: $*";}
ERRO(){ YN $ERRO_ENABLED || exit 1; echo "ERRO: $*"; exit 1;}

export WORK_DIR=/run/ananicy/
export DIR_CONFIGS=/etc/ananicy.d/

check_config_dir(){
    INFO "Check $DIR_CONFIGS dir"
    [ -d "$DIR_CONFIGS" ] || ERRO "Config dir $DIR_CONFIGS doesn't exist!"

    mkdir -p "$WORK_DIR"
    cd "$WORK_DIR" || exit 1
}

force_exit(){ [ -d "$WORK_DIR" ] && rm -rf "$WORK_DIR"; }
trap force_exit SIGINT SIGTERM EXIT

## Dedup/Save Types
load_types(){
    mkdir -p "TYPES_CACHE"

    INFO "Read types"
    find -P $DIR_CONFIGS -name "*.types" -type f | \
    while read -r config; do
        line_number=0
        INFO_ENABLED=$INFO_MSG_PARSE_ENABLED
        INFO "Parse $config"
        # remove comments       | remove unsafe symbols
        cut -d'#' -f1 "$config" | tr -d '`$)(' | \
        while read -r LINE; do
            line_number=$(($line_number+1))
            [ -z "$LINE" ] && continue
            echo "$LINE" > "$TMP"
            source "$TMP"
            [ -z "$TYPE" ] && ERRO "$config:$line_number TYPE are empty!"
            echo "$LINE" > "TYPES_CACHE/${TYPE}.type"
        done
    done
}

get_md5sum(){ echo "$@" | md5sum | cut -d ' ' -f1; }

load_rules(){
    mkdir -p "RULES_CACHE_TMP"

    ## Dedup rules
    INFO "Read rules"
    find -P $DIR_CONFIGS -name "*.rules" -type f | \
    while read -r config; do
        line_number=0
        INFO_ENABLED=$INFO_MSG_PARSE_ENABLED
        INFO "Parse $config"
        # remove comments       | remove unsafe symbols
        cut -d'#' -f1 "$config" | tr -d '`$)(' | \
        while read -r LINE; do
            line_number=$(($line_number+1))
            [ -z "$LINE" ] && continue
            echo "$LINE" > "$TMP"
            source "$TMP"
            [ -z "$NAME" ] && \
                ERRO "$config:$line_number NAME are empty!"
            HASH=$(get_md5sum "${NAME}")
            if [ -z "$TYPE" ]; then
                echo "$LINE" > "RULES_CACHE_TMP/${HASH}.rule"
            else
                echo "$LINE $(cat TYPES_CACHE/${TYPE}.type)" > "RULES_CACHE_TMP/${HASH}.rule"
            fi
        done
    done

    INFO "Cleanup types cache"
    rm -rf TYPES_CACHE

    [ "1" == "$(ls -l RULES_CACHE_TMP/ | wc -l)" ] && ERRO "Config dir: $DIR_CONFIGS are empty!"
}

compile_rules(){
    ## Compile rules
    INFO "Compile rules to cache"
    mkdir -p "RULES_CACHE"
    for FILE in RULES_CACHE_TMP/*.rule; do
        unset NICE IOCLASS IONICE SCHED OOM_SCORE_ADJ
        DO_SOMETHING=0
        PGREP_ARGS="-wf"
        source "$FILE"
        # Check if rule do something
        [ ! -z "$NICE" ] && {
            if [[ "$NICE" -gt 19 ]] || [[ -20 -gt "$NICE" ]]; then
                WARN "Nice must be in range -20..19, rule ignored: $(cat "$FILE")"
                continue
            fi
            DO_SOMETHING=1
        }


        [ ! -z "$IONICE" ] && {
            [[ $IONICE =~ [0-7] ]] || {
                WARN "IOnice/IOprio allowed only in range 0-7, rule ignored: $(cat "$FILE")"
                continue
            }
            DO_SOMETHING=1
        }

        [ ! -z "$IOCLASS" ] && {
            [[ $IOCLASS =~ (idle|realtime|best-effort) ]] || {
                WARN "IOclass (case sensitive) support only (idle|realtime|best-effort), rule ignored: $(cat "$FILE")"
                continue
            }
            DO_SOMETHING=1
        }

        if [ "$IOCLASS" == "idle" ] && [ ! -z $IONICE ]; then
            WARN "IOnice can't use IOclass idle + ionice/ioprio, rule ignored: $(cat "$FILE")"
            continue
        fi

        [ ! -z "$SCHED" ] && {
            [[ $SCHED =~ (batch|deadline|fifo|idle|other|rr|iso) ]] || {
                WARN "Sched (case sensitive) support only (batch|deadline|fifo|idle|other|rr|iso), rule ignored: $(cat "$FILE")"
                continue
            }
            DO_SOMETHING=1
        }

        [ ! -z "$OOM_SCORE_ADJ" ] && {
            if [[ "$OOM_SCORE_ADJ" -gt 1000 ]] || [[ -1000 -gt "$OOM_SCORE_ADJ" ]]; then
                WARN "OOM_SCORE_ADJ must be in range -1000..1000, rule ignored: $(cat "$FILE")"
                continue
            fi
            DO_SOMETHING=1
        }

        HASH=$(get_md5sum "${NAME}")
        if [ "$DO_SOMETHING" != "0" ]; then
                echo "NAME=\"$NAME\";PGREP_ARGS=$PGREP_ARGS;NICE=$NICE;IOCLASS=$IOCLASS;IONICE=$IONICE;SCHED=$SCHED;OOM_SCORE_ADJ=$OOM_SCORE_ADJ;TYPE=$TYPE;" > "RULES_CACHE/${HASH}.rule"
        fi
    done

    rm -rf RULES_CACHE_TMP "$TMP"

    [ "1" == "$(ls -l RULES_CACHE/ | wc -l)" ] && ERRO "No rule is enabled!"
}

split_rules(){
        mv RULES_CACHE RULES_CACHE_OFTEN
        mkdir -p RULES_CACHE_RARE
}

## Show cached information
show_rules(){
    INFO "Print compiled rules"
    grep . -R RULES_CACHE_*/*.rule | sort | column -s ';' -t
}

show_types(){
    load_types
    INFO "Print compiled types"
    sort TYPES_CACHE/*.type | column -t
    INFO "Cleanup types cache"
    rm -rf TYPES_CACHE
}
## Helper for renice_w()
nice_of_pid(){
    # 19 column in stat is a nice
    # But in some cases (name of process have a spaces)
    # It's break so.. use long solution
    [ -f /proc/$1/stat ] || return 1
    read -r LINE < /proc/$1/stat
    stat=(
        $(echo $LINE | sed -e 's/) . /:/g' | cut -d':' -f2)
    )
    echo ${stat[15]}
}

## Nice handler for pid
renice_w(){
    C_NICE=$(nice_of_pid $PID)
    [ -z "$C_NICE" ] && return
    [ "$C_NICE" == "$NICE" ] && return
    renice -n $NICE -p $PID &> /dev/null || return
    INFO_ENABLED="$INFO_MSG_NICE_ENABLED"
    INFO "Process ${NAME}[$PID] cpu nice: $C_NICE -> $NICE"
}

## Helpers for ionice_w
ioclass_of_pid(){ ionice -p $1 2> /dev/null | cut -d':' -f1; }
ionice_of_pid(){  ionice -p $1 2> /dev/null | cut -d':' -f2 | tr -d ' prio'; }

## IONice handlers for pid
ionice_w(){
    C_IONICE=$(ionice_of_pid $PID)
    [ -z "$C_IONICE" ] && return
    [ "$C_IONICE" == "$IONICE" ] && return
    ionice -n "$IONICE" -p "$PID" &> /dev/null || return
    INFO_ENABLED="$INFO_MSG_IONICE_ENABLED"
    INFO "Process ${NAME}[$PID] ionice: $C_IONICE -> $IONICE"
}

ionice_class_w(){
    C_IOCLASS=$(ioclass_of_pid $PID)
    [ -z "$C_IOCLASS" ] && return
    [[ "$C_IOCLASS" =~ $IOCLASS ]] && return
    ionice -c "$IOCLASS" -p "$PID" &> /dev/null || return
    INFO_ENABLED="$INFO_MSG_IOCLASS_ENABLED"
    INFO "Process ${NAME}[$PID] ioclass: $C_IOCLASS -> $IOCLASS"
}

oom_score_adj_w(){
    read C_OOM_SCORE_ADJ < /proc/$PID/oom_score_adj || return
    [ -z "$C_OOM_SCORE_ADJ" ] && return
    [[ "$C_OOM_SCORE_ADJ" == "$OOM_SCORE_ADJ" ]] && return
    echo $OOM_SCORE_ADJ > /proc/$PID/oom_score_adj || return
    INFO_ENABLED="$INFO_MSG_OOM_SCORE_ADJ_ENABLED"
    INFO "Process ${NAME}[$PID] oom_score: $C_OOM_SCORE_ADJ -> $OOM_SCORE_ADJ"
}

schedtool_policy_of_pid(){ schedtool $1 2> /dev/null | grep POLICY | cut -d ':' -f3 | cut -d ' ' -f2 | tr -d ' '; }

## schedtool handler for pid
schedtool_policy_w(){
    L_PRIO=0
    C_SCHED=$(schedtool_policy_of_pid $PID)
    C_SCHED="${C_SCHED//SCHED_/}"   # Remove 'SCHED_' prefix
    C_SCHED="${C_SCHED,,}"          # Upper case to lower case
    [ -z "$C_SCHED" ] && return
    [[ "$SCHED" =~ $C_SCHED ]] && return
    [[ "$SCHED" =~ other ]] && [[ "$C_SCHED" =~ normal ]] && return
    [[ "$SCHED" =~ idle ]] && [[ "$C_SCHED" =~ idleprio ]] && return
    [[ "$SCHED" =~ (rr|fifo) ]] && L_PRIO=1
    [[ "$SCHED" =~ (other|normal) ]] && SCHEDARGUMENT="-N"
    [[ "$SCHED" =~ fifo ]] && SCHEDARGUMENT="-F"
    [[ "$SCHED" =~ rr ]] && SCHEDARGUMENT="-R"
    [[ "$SCHED" =~ batch ]] && SCHEDARGUMENT="-B"
    [[ "$SCHED" =~ iso ]] && SCHEDARGUMENT="-I"
    [[ "$SCHED" =~ idle ]] && SCHEDARGUMENT="-D"

    schedtool $SCHEDARGUMENT -p $L_PRIO $PID &> /dev/null || return
    INFO_ENABLED="$INFO_MSG_SCHED_ENABLED"
    INFO "Process ${NAME}[$PID] sched: $C_SCHED -> $SCHED"
}

check_root_rights(){ [ "$UID" == "0" ] || ERRO "Script must be runned as root!"; }

check_schedulers(){
    for disk_path in /sys/class/block/*; do
        disk_name=$(basename $disk_path)
        [[ "$disk_name" =~ (loop|ram|sr) ]] && continue
        scheduler_path="$disk_path/queue/scheduler"
        [ ! -f $scheduler_path ] && continue
        grep -q '\[cfq\]\|\[bfq\]\|\[bfq-mq\]' $scheduler_path || \
            WARN "Disk $disk_name not used cfq/bfq scheduler IOCLASS/IONICE will not work on it!"
    done
}

check_bins(){
    bin_exist(){ command -v "$1" &> /dev/null || ERRO "Missing ${1}!"; }
    for bin in find pgrep renice ionice schedtool; do
        bin_exist $bin
    done
}

show_help(){
    echo "Usage: ananicy [options]"
    echo "  start         Run script"
    echo "  stop          Stop script"
    echo "  reload        Recompile rule cache"
    echo "  dump rules    Generate and print rules cache to stdout"
    echo "  dump types    Generate and print types cache to stdout"
}

## Load general config
INFO_MSG_PARSE_ENABLED=true
INFO_MSG_NICE_ENABLED=true
INFO_MSG_IOCLASS_ENABLED=true
INFO_MSG_IONICE_ENABLED=true
INFO_MSG_SCHED_ENABLED=true
INFO_MSG_OOM_SCORE_ADJ_ENABLED=true

FREQ_SCALE_OFTEN_BETWEEN_RULES=1
FREQ_SCALE_OFTEN_BETWEEN_RUNS=2
FREQ_SCALE_RARE_BETWEEN_RULES=2
FREQ_SCALE_RARE_BETWEEN_RUNS=5


CONF="/etc/ananicy.d/ananicy.conf"
[ -f "$CONF" ] && source "$CONF"

sleep_x_times(){
        X=${1-:"1"}
        while ((X > 0)); do sleep $CHECK_FREQ; X=$((X-1)); done
}

pgrep_w(){ pgrep $PGREP_ARGS "$@"; }

do_pid_things(){
        for PID in "$@"; do
            [ -z "$PID" ] && break
            [ ! -d "/proc/$PID"     ] && continue
            [ ! -z "$NICE"          ] && renice_w
            [ ! -z "$IOCLASS"       ] && ionice_class_w
            [ ! -z "$IONICE"        ] && ionice_w
            [ ! -z "$SCHED"         ] && schedtool_policy_w
            [ ! -z "$OOM_SCORE_ADJ" ] && oom_score_adj_w
        done
}

# Thread with frequently matched rules
thread_often(){
        while [ -d "$WORK_DIR" ]; do
            for RULE in RULES_CACHE_OFTEN/*.rule; do
                [ ! -d "$WORK_DIR" ] && break
                [ ! -f "$RULE" ] && continue
                NICE="" IOCLASS="" IONICE="" SCHED="" OOM_SCORE_ADJ=""
                source "$RULE"
                NAME="${NAME//\"/}"
                PIDS=( $( pgrep_w "$NAME" ) )
                do_pid_things "${PIDS[@]}"
                ((${#PIDS[@]} > 0)) && touch $RULE
                # Pause before processing next rule
                sleep_x_times $FREQ_SCALE_OFTEN_BETWEEN_RULES
            done
            find RULES_CACHE_OFTEN -type f -cmin +5 | \
                while read -r rarerule; do
                        [ ! -f "$rarerule" ] && continue
                        mv $rarerule RULES_CACHE_RARE/
                done
            sleep_x_times $FREQ_SCALE_OFTEN_BETWEEN_RUNS
        done
}

# Thread with rarely matched rules
thread_rare(){
        while [ -d "$WORK_DIR" ]; do
            for RULE in RULES_CACHE_RARE/*.rule; do
                [ ! -d "$WORK_DIR" ] && break
                [ ! -f "$RULE" ] && continue
                NICE="" IOCLASS="" IONICE="" SCHED="" OOM_SCORE_ADJ=""
                source "$RULE"
                NAME="${NAME//\"/}"
                PIDS=( $( pgrep_w "$NAME" ) )
                do_pid_things "${PIDS[@]}"
                ((${#PIDS[@]} > 0)) && mv $RULE RULES_CACHE_OFTEN/
                # Pause before processing next rule
                sleep_x_times $FREQ_SCALE_RARE_BETWEEN_RULES
            done
            sleep_x_times $FREQ_SCALE_RARE_BETWEEN_RUNS
        done
}

## Main process
case $1 in
   start)
        check_root_rights
        check_schedulers
        check_bins
        check_config_dir
        load_types
        load_rules
        compile_rules
        split_rules
        INFO "Initialization completed"
        systemd-notify --ready
        INFO "Start main process"
        CHECK_FREQ=${CHECK_FREQ:-0.2s}
        export NAME PID NICE IOCLASS IONICE SCHED OOM_SCORE_ADJ
        thread_often &
        thread_rare &
        wait
    ;;
    stop) force_exit ;;
    reload)
        check_root_rights
        check_schedulers
        check_bins
        check_config_dir
        load_types
        load_rules
        compile_rules
        split_rules
        force_exit(){ :; }
    ;;
    dump)
        check_config_dir
        case "$2" in
            rules) show_rules;;
            types) show_types;;
        esac
        force_exit(){ :; }
    ;;
    *)
        show_help
        # Dont remove rules
        force_exit(){ :; }
    ;;
esac
